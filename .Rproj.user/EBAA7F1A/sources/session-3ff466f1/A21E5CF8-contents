---
title: 
output: html_document
date: 
---

```{r}
categorical_deseq_results <- readRDS("/restricted/projectnb/cteseq/jrose/cte_deseq_output_cat_binary.rds")
continuous_deseq_results <- readRDS("/restricted/projectnb/cteseq/jrose/cte_deseq_output_cont.rds")

```

```{r, echo=FALSE}
library(DESeq2)
library(dplyr)
library(biomaRt)
library(tidyverse)
library(pheatmap)
library(fgsea)
library(ggplot2)
library(data.table)

#assigning names of covariate results
categ_names <- names(categorical_deseq_results)

cont_names <- names(continuous_deseq_results)

all_deseq_obj <- c(continuous_deseq_results, categorical_deseq_results)
all_obj_names <- c(cont_names, categ_names)
```

applying the DESeq2 results() function on each RDS object via lapply
Categorical data first
```{r}
categ_results <- lapply(
  categ_names,
  function(result_name) {
    results_c <- results(categorical_deseq_results[[result_name]])
    results_sig <- subset(results_c, padj < 0.05)
    results_sig <- results_sig[order(results_sig$pvalue), ]
    return(results_sig)
    })
names(categ_results) <- categ_names

lapply(
  categ_names,
  function(result_name) {
    assign(result_name, as_tibble(categ_results[[result_name]], rownames = "ENSGID"), envir = .GlobalEnv
           )
  }
)
```
Continuous data next
```{r}
cont_results <- lapply(
  cont_names,
  function(result_name) {
    results_c <- results(continuous_deseq_results[[result_name]])
    results_sig <- subset(results_c, padj < 0.05)

    return(results_c)
    })
names(cont_results) <- cont_names


lapply(
  cont_names,
  function(result_name) {
    assign(result_name, as_tibble(cont_results[[result_name]], rownames = "ENSGID"), envir = .GlobalEnv
           )
  }
)
```
Converting ensembl IDs to gene symbols
```{r}
#Combines list
all_results <- c(cont_results, categ_results)
#Removes empty columns
for (i in seq_along(all_results)) {
  all_results[[i]] <- all_results[[i]][,colSums(is.na(all_results[[i]]))<nrow(all_results[[i]])]
}
#list of deseq result object names 
all_results_names <- names(all_results)
#Creating a gene_map to provide gene symbols as an alternative to ENSGID
gene_ids <- unique(unlist(lapply(
  all_results,
  function(i)
    rownames(i)
)))
#removes the dot and numbers after from all ensg IDs
cleaned_gene_ids <- sub("\\..*$", "", gene_ids)
#Creates a mart object for creating the gene map.
ensembl.con <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")

gene_map <- getBM(attributes = c("ensembl_gene_id", "external_gene_name"),
      filters = "ensembl_gene_id",
      values = cleaned_gene_ids,
      mart = ensembl.con)
#Removes the dot and numbers from ENSGIDs from all deseq2 result objects
for (i in all_results_names) {
  rownames(all_results[[i]]) <- gsub("\\.\\d+$", "", rownames(all_results[[i]]))
}
#Converts each result object into a df, then merges gene symbols into each each df
for (i in seq_along(all_results)) {
  all_results[[i]] <- data.frame(all_results[[i]])
  all_results[[i]]$rownames <- rownames(all_results[[i]])
  all_results[[i]] <- merge(all_results[[i]], gene_map, by.x ="rownames", by.y ="ensembl_gene_id", all.x = TRUE)
}

#removes all rows that do not have a gene symbol
for (i in seq_along(all_results)) {
  all_results[[i]] <- all_results[[i]][complete.cases(all_results[[i]]$external_gene_name) & all_results[[i]]$external_gene_name != "", ]
}
```


gsea
```{r}
#isolates l2fc and gene symbols to use in gsea
for (i in names(all_results)) {
  #all_results[[i]] <- all_results[[i]][, !(names(all_results[[i]]) %in% c("rownames", "baseMean", "lfcSE", "stat", "pvalue", "padj"))]
  #all_results[[i]] <- data.frame(all_results[[i]])
  all_results[[i]] <- all_results[[i]][order(all_results[[i]]$log2FoldChange), ]
}


```




